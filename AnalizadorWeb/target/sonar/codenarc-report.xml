<?xml version='1.0'?>
<CodeNarc url='http://www.codenarc.org' version='0.15'><Report timestamp='08-dic-2011 14:01:37'/><Project title='Sonar'><SourceDirectory>/users/juancarlos/NetBeansProjects/AnalizadorWeb/AnalizadorWeb/grails-app</SourceDirectory></Project><PackageSummary totalFiles='26' filesWithViolations='3' priority1='0' priority2='14' priority3='0'></PackageSummary><Package path='' totalFiles='26' filesWithViolations='3' priority1='0' priority2='14' priority3='0'></Package><Package path='conf' totalFiles='7' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='conf/spring' totalFiles='1' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='controllers' totalFiles='9' filesWithViolations='3' priority1='0' priority2='14' priority3='0'></Package><Package path='controllers/modelo' totalFiles='9' filesWithViolations='3' priority1='0' priority2='14' priority3='0'><File name='DefectoController.groovy'><Violation ruleName='CatchException' priority='2' lineNumber='116'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='129'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='NestedBlockDepth' priority='2' lineNumber='113'><SourceLine><![CDATA[try{]]></SourceLine><Message><![CDATA[The nested block depth is 6]]></Message></Violation><Violation ruleName='NestedBlockDepth' priority='2' lineNumber='116'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The nested block depth is 6]]></Message></Violation></File><File name='ProgramaController.groovy'><Violation ruleName='CatchException' priority='2' lineNumber='30'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='45'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation></File><File name='ProgramaFechaController.groovy'><Violation ruleName='CatchException' priority='2' lineNumber='171'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='CatchException' priority='2' lineNumber='192'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The type Exception should not be caught]]></Message></Violation><Violation ruleName='NestedBlockDepth' priority='2' lineNumber='141'><SourceLine><![CDATA[if(it."${Defecto.list().get(y).getNombre()}".text().length()>2){ // reviso que los valores sean mas que los []]]></SourceLine><Message><![CDATA[The nested block depth is 6]]></Message></Violation><Violation ruleName='NestedBlockDepth' priority='2' lineNumber='159'><SourceLine><![CDATA[for(int d=0; d < defecto.size();d++){]]></SourceLine><Message><![CDATA[The nested block depth is 6]]></Message></Violation><Violation ruleName='NestedBlockDepth' priority='2' lineNumber='165'><SourceLine><![CDATA[for(int l=0; l<linea.size();l++){]]></SourceLine><Message><![CDATA[The nested block depth is 7]]></Message></Violation><Violation ruleName='NestedBlockDepth' priority='2' lineNumber='169'><SourceLine><![CDATA[try{]]></SourceLine><Message><![CDATA[The nested block depth is 7]]></Message></Violation><Violation ruleName='NestedBlockDepth' priority='2' lineNumber='171'><SourceLine><![CDATA[}catch(Exception e){]]></SourceLine><Message><![CDATA[The nested block depth is 7]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='158'><SourceLine><![CDATA[println programa]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation></File></Package><Package path='domain' totalFiles='9' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='domain/modelo' totalFiles='9' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Package path='taglib' totalFiles='1' filesWithViolations='0' priority1='0' priority2='0' priority3='0'></Package><Rules><Rule name='CatchError'><Description><![CDATA[Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></Description></Rule><Rule name='CatchException'><Description><![CDATA[Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CatchNullPointerException'><Description><![CDATA[Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.]]></Description></Rule><Rule name='CatchRuntimeException'><Description><![CDATA[Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></Description></Rule><Rule name='CloneableWithoutClone'><Description><![CDATA[A class that implements java.lang.Cloneable should define a clone() method.]]></Description></Rule><Rule name='ElseBlockBraces'><Description><![CDATA[Use braces for else blocks, even for a single statement. By default, braces are not required for an else if it is followed immediately by an if. Set the bracesRequiredForElseIf property to true to require braces is that situation as well.]]></Description></Rule><Rule name='GrailsPublicControllerMethod'><Description><![CDATA[Checks for public methods on Grails controller classes. Static methods are ignored.]]></Description></Rule><Rule name='GrailsServletContextReference'><Description><![CDATA[Checks for references to the servletContext object from within Grails controller and taglib classes.]]></Description></Rule><Rule name='GrailsStatelessService'><Description><![CDATA[Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The ignoreFieldNames property (dataSource,scope,sessionFactory,transactional,*Service) specifies one or more field names that should be ignored. The ignoreFieldTypes property (null) specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').]]></Description></Rule><Rule name='NestedBlockDepth'><Description><![CDATA[Checks for blocks or closures nested more than maxNestedBlockDepth (5) levels deep.]]></Description></Rule><Rule name='NestedSynchronization'><Description><![CDATA[Nested synchronized statements should be avoided. Nested synchronized statements are either useless (if the lock objects are identical) or prone to deadlock.]]></Description></Rule><Rule name='PrintStackTrace'><Description><![CDATA[Checks for calls to printStackTrace().]]></Description></Rule><Rule name='Println'><Description><![CDATA[Checks for calls to this.print(), this.println() or this.printf().]]></Description></Rule><Rule name='ReturnFromFinallyBlock'><Description><![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='SynchronizedMethod'><Description><![CDATA[This rule reports uses of the synchronized keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.]]></Description></Rule><Rule name='SystemErrPrint'><Description><![CDATA[Checks for calls to System.err.print(), System.err.println() or System.err.printf().]]></Description></Rule><Rule name='SystemOutPrint'><Description><![CDATA[Checks for calls to System.out.print(), System.out.println() or System.out.printf().]]></Description></Rule><Rule name='SystemRunFinalizersOnExit'><Description><![CDATA[Method calls to System.runFinalizersOnExit() should not be allowed. This method is inherently non-thread-safe, may result in data corruption, deadlock, and may effect parts of the program far removed from it's call point. It is deprecated, and it's use strongly discouraged.]]></Description></Rule><Rule name='ThreadYield'><Description><![CDATA[Method calls to Thread.yield() should not be allowed. This method has no useful guaranteed semantics, and is often used by inexperienced programmers to mask race conditions.]]></Description></Rule><Rule name='ThrowError'><Description><![CDATA[Checks for throwing an instance of java.lang.Error.]]></Description></Rule><Rule name='ThrowException'><Description><![CDATA[Checks for throwing an instance of java.lang.Exception.]]></Description></Rule><Rule name='ThrowExceptionFromFinallyBlock'><Description><![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='ThrowNullPointerException'><Description><![CDATA[Checks for throwing an instance of java.lang.NullPointerException.]]></Description></Rule><Rule name='ThrowRuntimeException'><Description><![CDATA[Checks for throwing an instance of java.lang.RuntimeException.]]></Description></Rule><Rule name='ThrowThrowable'><Description><![CDATA[Checks for throwing an instance of java.lang.Throwable.]]></Description></Rule><Rule name='UnnecessaryGroovyImport'><Description><![CDATA[A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.]]></Description></Rule><Rule name='UnusedImport'><Description><![CDATA[Imports for a class that is never referenced within the source file is unnecessary.]]></Description></Rule><Rule name='UnusedPrivateField'><Description><![CDATA[Checks for private fields that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedPrivateMethod'><Description><![CDATA[Checks for private methods that are not referenced within the same class.]]></Description></Rule><Rule name='UnusedVariable'><Description><![CDATA[Checks for variables that are never referenced.]]></Description></Rule><Rule name='VolatileLongOrDoubleField'><Description><![CDATA[Long or double fields should not be declared as volatile. Java specifies that reads and writes from such fields are atomic, but many JVM's have violated this specification. Unless you are certain of your JVM, it is better to synchronize access to such fields rather than declare them volatile. This rule flags fields marked volatile when their type is double or long or the name of their type is "Double" or "Long".]]></Description></Rule></Rules></CodeNarc>